{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport ApolloClient, { InMemoryCache } from \"apollo-boost\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { setContext } from \"apollo-link-context\";\nimport fetch from \"isomorphic-unfetch\";\nconst isBrowser = process.browser;\n\nif (!isBrowser) {\n  global.fetch = fetch;\n}\n\nfunction getToken() {\n  const token = sessionStorage.getItem(\"token\");\n  return token ? token : \"\";\n}\n\nfunction create(initialState, {\n  getToken\n}) {\n  const httpLink = createHttpLink({\n    uri: \"http://localhost:4000\",\n    credentials: \"same-origin\"\n  });\n  const authLink = setContext((_, {\n    headers\n  }) => {\n    const token = getToken;\n    return {\n      headers: _objectSpread(_objectSpread({}, headers), {}, {\n        authorization: token\n      })\n    };\n  });\n}\n\nexport const apolloClient = new ApolloClient({\n  cache: new InMemoryCache({}),\n  uri: \"http://localhost:4000\"\n});","map":{"version":3,"sources":["/Users/wyattqueirolo/Wyatt/mehappy/frontend/lib/graphql-client.ts"],"names":["ApolloClient","InMemoryCache","createHttpLink","setContext","fetch","isBrowser","process","browser","global","getToken","token","sessionStorage","getItem","create","initialState","httpLink","uri","credentials","authLink","_","headers","authorization","apolloClient","cache"],"mappings":";;;;;;AAAA,OAAOA,YAAP,IAAuBC,aAAvB,QAA4C,cAA5C;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,MAAMC,SAAkB,GAAIC,OAAD,CAAiBC,OAA5C;;AAEA,IAAI,CAACF,SAAL,EAAgB;AACbG,EAAAA,MAAD,CAAgBJ,KAAhB,GAAwBA,KAAxB;AACD;;AAMD,SAASK,QAAT,GAAoB;AAClB,QAAMC,KAAK,GAAGC,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAAd;AACA,SAAOF,KAAK,GAAGA,KAAH,GAAW,EAAvB;AACD;;AAED,SAASG,MAAT,CAAgBC,YAAhB,EAAmC;AAAEL,EAAAA;AAAF,CAAnC,EAA0D;AACxD,QAAMM,QAAQ,GAAGb,cAAc,CAAC;AAC9Bc,IAAAA,GAAG,EAAE,uBADyB;AAE9BC,IAAAA,WAAW,EAAE;AAFiB,GAAD,CAA/B;AAKA,QAAMC,QAAQ,GAAGf,UAAU,CAAC,CAACgB,CAAD,EAAI;AAAEC,IAAAA;AAAF,GAAJ,KAAoB;AAC9C,UAAMV,KAAK,GAAGD,QAAd;AACA,WAAO;AACLW,MAAAA,OAAO,kCACFA,OADE;AAELC,QAAAA,aAAa,EAAEX;AAFV;AADF,KAAP;AAMD,GAR0B,CAA3B;AASD;;AAED,OAAO,MAAMY,YAAY,GAAG,IAAItB,YAAJ,CAAiB;AAC3CuB,EAAAA,KAAK,EAAE,IAAItB,aAAJ,CAAkB,EAAlB,CADoC;AAE3Ce,EAAAA,GAAG,EAAE;AAFsC,CAAjB,CAArB","sourcesContent":["import ApolloClient, { InMemoryCache } from \"apollo-boost\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { setContext } from \"apollo-link-context\";\nimport fetch from \"isomorphic-unfetch\";\n\nconst isBrowser: boolean = (process as any).browser;\n\nif (!isBrowser) {\n  (global as any).fetch = fetch;\n}\n\ninterface Options {\n  getToken: () => string;\n}\n\nfunction getToken() {\n  const token = sessionStorage.getItem(\"token\");\n  return token ? token : \"\";\n}\n\nfunction create(initialState: any, { getToken }: Options) {\n  const httpLink = createHttpLink({\n    uri: \"http://localhost:4000\",\n    credentials: \"same-origin\",\n  });\n\n  const authLink = setContext((_, { headers }) => {\n    const token = getToken;\n    return {\n      headers: {\n        ...headers,\n        authorization: token,\n      },\n    };\n  });\n}\n\nexport const apolloClient = new ApolloClient({\n  cache: new InMemoryCache({}),\n  uri: \"http://localhost:4000\",\n});\n"]},"metadata":{},"sourceType":"module"}