{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { setContext } from \"apollo-link-context\";\nimport fetch from \"isomorphic-unfetch\";\nvar apolloClient = null;\nvar isBrowser = process.browser;\n\nif (!isBrowser) {\n  global.fetch = fetch;\n}\n\nfunction getToken() {\n  var token = sessionStorage.getItem(\"token\");\n  return token ? token : \"\";\n}\n\nvar defaultOptions = {\n  getToken: getToken\n};\n\nfunction create(initialState, _ref) {\n  var getToken = _ref.getToken;\n  var httpLink = createHttpLink({\n    uri: \"http://localhost:4000\",\n    credentials: \"same-origin\"\n  });\n  var authLink = setContext(function (_, _ref2) {\n    var headers = _ref2.headers;\n    var token = getToken;\n    return {\n      headers: _objectSpread(_objectSpread({}, headers), {}, {\n        authorization: token\n      })\n    };\n  });\n  return new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}","map":{"version":3,"sources":["/Users/wyattqueirolo/Wyatt/mehappy/frontend/lib/graphql-client.ts"],"names":["ApolloClient","InMemoryCache","createHttpLink","setContext","fetch","apolloClient","isBrowser","process","browser","global","getToken","token","sessionStorage","getItem","defaultOptions","create","initialState","httpLink","uri","credentials","authLink","_","headers","authorization","link","concat","cache","restore"],"mappings":";;;;;;AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAAqD,uBAArD;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,IAAIC,YAAwD,GAAG,IAA/D;AAEA,IAAMC,SAAkB,GAAIC,OAAD,CAAiBC,OAA5C;;AAEA,IAAI,CAACF,SAAL,EAAgB;AACbG,EAAAA,MAAD,CAAgBL,KAAhB,GAAwBA,KAAxB;AACD;;AAMD,SAASM,QAAT,GAAoB;AAClB,MAAMC,KAAK,GAAGC,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAAd;AACA,SAAOF,KAAK,GAAGA,KAAH,GAAW,EAAvB;AACD;;AAED,IAAMG,cAAc,GAAG;AACrBJ,EAAAA,QAAQ,EAARA;AADqB,CAAvB;;AAIA,SAASK,MAAT,CAAgBC,YAAhB,QAA0D;AAAA,MAArBN,QAAqB,QAArBA,QAAqB;AACxD,MAAMO,QAAQ,GAAGf,cAAc,CAAC;AAC9BgB,IAAAA,GAAG,EAAE,uBADyB;AAE9BC,IAAAA,WAAW,EAAE;AAFiB,GAAD,CAA/B;AAKA,MAAMC,QAAQ,GAAGjB,UAAU,CAAC,UAACkB,CAAD,SAAoB;AAAA,QAAdC,OAAc,SAAdA,OAAc;AAC9C,QAAMX,KAAK,GAAGD,QAAd;AACA,WAAO;AACLY,MAAAA,OAAO,kCACFA,OADE;AAELC,QAAAA,aAAa,EAAEZ;AAFV;AADF,KAAP;AAMD,GAR0B,CAA3B;AAUA,SAAO,IAAIX,YAAJ,CAAiB;AACtBwB,IAAAA,IAAI,EAAEJ,QAAQ,CAACK,MAAT,CAAgBR,QAAhB,CADgB;AAEtBS,IAAAA,KAAK,EAAE,IAAIzB,aAAJ,GAAoB0B,OAApB,CAA4BX,YAAY,IAAI,EAA5C;AAFe,GAAjB,CAAP;AAID","sourcesContent":["import { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache, NormalizedCacheObject } from \"apollo-cache-inmemory\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { setContext } from \"apollo-link-context\";\nimport fetch from \"isomorphic-unfetch\";\n\nlet apolloClient: ApolloClient<NormalizedCacheObject> | null = null;\n\nconst isBrowser: boolean = (process as any).browser;\n\nif (!isBrowser) {\n  (global as any).fetch = fetch;\n}\n\ninterface Options {\n  getToken: () => string;\n}\n\nfunction getToken() {\n  const token = sessionStorage.getItem(\"token\");\n  return token ? token : \"\";\n}\n\nconst defaultOptions = {\n  getToken\n}\n\nfunction create(initialState: any, { getToken }: Options) {\n  const httpLink = createHttpLink({\n    uri: \"http://localhost:4000\",\n    credentials: \"same-origin\",\n  });\n\n  const authLink = setContext((_, { headers }) => {\n    const token = getToken;\n    return {\n      headers: {\n        ...headers,\n        authorization: token,\n      },\n    };\n  });\n\n  return new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState || {}),\n  });\n}\n\nexport default function initApollo(initialState: any, options = defaultOptions)\n"]},"metadata":{},"sourceType":"module"}